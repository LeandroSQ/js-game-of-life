{
  "version": 3,
  "sources": ["src/scripts/extensions.ts", "src/scripts/utils/log.ts", "src/scripts/utils/color.ts", "src/scripts/utils/theme.ts", "src/scripts/components/density-canvas.ts", "src/scripts/models/grid.ts", "src/scripts/utils/font.ts", "src/scripts/utils/pattern.ts", "src/scripts/main.ts"],
  "sourcesContent": ["import { Main } from \"./main\";\n\n// Signatures\ndeclare global {\n\n    interface Window {\n        _instance: Main;\n        addLoadEventListener: (listener: () => void) => void;\n        addVisibilityChangeEventListener: (listener: (isVisible: boolean) => void) => void;\n    }\n\n    interface CanvasRenderingContext2D {\n        drawLine: (x1: number, y1: number, x2: number, y2: number) => void;\n        drawCircle: (x: number, y: number, radius: number) => void;\n    }\n\n    interface HTMLCanvasElement {\n        screenshot: () => void;\n    }\n\n    interface String {\n        toCamelCase: () => string;\n    }\n\n    const DEBUG: boolean;\n\n}\n\n// Definitions\nwindow.addLoadEventListener = function(listener) {\n\tlet fired = false;\n\n\tconst _func = () => {\n\t\tif (fired) return;\n\t\tfired = true;\n\n\t\tlistener();\n\t};\n\n\twindow.addEventListener(\"DOMContentLoaded\", _func);\n\twindow.addEventListener(\"load\", _func);\n\tdocument.addEventListener(\"load\", _func);\n\twindow.addEventListener(\"ready\", _func);\n\tsetTimeout(_func, 1000);\n};\n\nwindow.addVisibilityChangeEventListener = function(listener) {\n\tconst prefixes = [\"webkit\", \"moz\", \"ms\", \"\"];\n\n\tlet fired = false;\n\n\tconst _func = () => {\n\t\tif (fired) return;\n\t\tfired = true;\n\n\t\tconst isDocumentHidden = prefixes\n\t\t\t.map((x) => (x && x.length > 0 ? `${x}Hidden` : \"hidden\"))\n\t\t\t.map((x) => document[x]).reduce((a, b) => a || b, false);\n\n\t\tlistener(!isDocumentHidden);\n\n\t\tsetTimeout(() => {\n\t\t\tfired = false;\n\t\t}, 100);\n\t};\n\n\tfor (const prefix of prefixes) document.addEventListener(`${prefix}visibilitychange`, _func);\n\tdocument.onvisibilitychange = _func;\n};\n\nCanvasRenderingContext2D.prototype.drawLine = function(x1, y1, x2, y2) {\n\tthis.beginPath();\n\tthis.moveTo(x1, y1);\n\tthis.lineTo(x2, y2);\n\tthis.stroke();\n};\n\nCanvasRenderingContext2D.prototype.drawCircle = function(x, y, radius) {\n\tthis.beginPath();\n\tthis.arc(x, y, radius, 0, 2 * Math.PI);\n};\n\nHTMLCanvasElement.prototype.screenshot = function(filename = \"download.png\") {\n\tconst a = document.createElement(\"a\");\n\ta.download = filename;\n\ta.href = this.toDataURL(\"image/png;base64\");\n\ta.style.visibility = \"hidden\";\n\ta.style.display = \"none\";\n\tdocument.body.appendChild(a);\n\n\tsetTimeout(() => {\n\t\ta.click();\n\t\tdocument.body.removeChild(a);\n\t}, 100);\n};\n\nString.prototype.toCamelCase = function() {\n\treturn this.replace(\"--\", \"\")\n\t\t.replace(/-./g, (x) => x[1].toUpperCase())\n\t\t.trim();\n};\n\nexport { };", "export class Log {\n\n\tprivate static logColoredText(level: string, tag: string, tagColor: string, ...args: string[]) {\n\t\tconsole[level].call(\n\t\t\tconsole,\n\t\t\t`%c${level.toUpperCase()} %c[${tag}]`,\n\t\t\t`font-weight: bold; color: ${tagColor};`,\n\t\t\t\"font-weight: bold; color: gray\",\n\t\t\t...args\n\t\t);\n\t}\n\n\tpublic static info(tag: string, ...args: string[]) {\n\t\tthis.logColoredText(\"info\", tag, \"turquoise\", ...args);\n\t}\n\n\tpublic static warn(tag: string, ...args: string[]) {\n\t\tthis.logColoredText(\"warn\", tag, \"yellow\", ...args);\n\t}\n\n\tpublic static error(tag: string, ...args: string[]) {\n\t\tthis.logColoredText(\"error\", tag, \"red\", ...args);\n\t}\n\n\tpublic static debug(tag: string, ...args: string[]) {\n\t\tif (!DEBUG) return;\n\n\t\tthis.logColoredText(\"debug\", tag, \"magenta\", ...args);\n\t}\n\n};", "export class Color {\n\n\tpublic static isColorLight(hex: string): boolean {\n\t\t// Remove the # if present\n\t\tlet tmp = `0x${hex.trim().slice(1)}`;\n\n\t\t// Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n\t\tif (tmp.length < 5) tmp = tmp.replace(/./g, \"$&$&\");\n\n\t\t// Convert to integer\n\t\tconst color = parseInt(tmp, 16);\n\n\t\t// Decode the color channels\n\t\tconst r = color >> 16;\n\t\tconst g = (color >> 8) & 255;\n\t\tconst b = color & 255;\n\n\t\t// HSP (Highly Sensitive Poo) equation from http://alienryderflex.com/hsp.html\n\t\tconst hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));\n\n\t\treturn hsp > 127.5;\n\t}\n\n}", "import { Main } from \"./../main\";\nimport { Log } from \"./log\";\nimport { Color } from \"./color\";\n\nexport class Theme {\n\n\tpublic static background: string;\n\n\tpublic static foreground: string;\n\n\tpublic static containerBackground: string;\n\n\tpublic static containerBorder: string;\n\n\tpublic static containerShadow: string;\n\n\tpublic static cellAlive: string;\n\n\tpublic static cellDead: string;\n\n\tprivate static main: Main;\n\n\tpublic static async setup(main: Main) {\n\t\tTheme.main = main;\n\n\t\tTheme.loadVariables();\n\t\tTheme.observeChanges();\n\t}\n\n\tprivate static loadVariables() {\n\t\t// Define the CSS variables to keep track of\n\t\tconst variables = [\n\t\t\t\"--background\",\n\t\t\t\"--foreground\",\n\t\t\t\"--container-background\",\n\t\t\t\"--container-border\",\n\t\t\t\"--container-shadow\",\n\t\t\t\"--cell-alive\",\n\t\t\t\"--cell-dead\",\n\t\t];\n\n\t\tLog.info(\"Theme\", `Setting up theme, loading ${variables.length} variables...`);\n\n\t\tconsole.groupCollapsed(\"Loading theme variables\");\n\n\t\t// Iterate trough variables\n\t\tconst style = getComputedStyle(document.body);\n\t\tfor (const variable of variables) {\n\t\t\t// Get the variable value\n\t\t\tconst value = style.getPropertyValue(variable);\n\t\t\tconst name = variable.toString().toCamelCase();\n\n\t\t\t// Set the variable on this instance\n\t\t\tTheme[name] = value;\n\n\t\t\t// Print out the variable\n\t\t\tconsole.log(`%c${name}`, `color: ${Color.isColorLight(value) ? \"#212121\" : \"#eee\"}; background-color: ${value}`);\n\n\t\t}\n\n\t\tconsole.groupEnd();\n\t}\n\n\tprivate static observeChanges() {\n\t\tconst darkThemeMediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\t\tdarkThemeMediaQuery.addEventListener(\"change\", () => {\n\t\t\tLog.info(\"Theme\", `Changed theme to ${darkThemeMediaQuery.matches ? \"dark\" : \"light\"}`);\n\n\t\t\tTheme.loadVariables();\n\t\t});\n\t}\n\n}", "export class DensityCanvas {\n\n\tpublic element: HTMLCanvasElement = document.createElement(\"canvas\");\n\n\tpublic context: CanvasRenderingContext2D;\n\n\tprivate virtualWidth = 0;\n\n\tprivate virtualHeight = 0;\n\n\tprivate drawRatio = 1;\n\n\tprivate overrideRatio: number | undefined = undefined;\n\n\tconstructor(name: string | undefined = undefined) {\n\t\tif (name) this.element.id = name;\n\n\t\tconst context = this.element.getContext(\"2d\");\n\t\tif (!context) throw new Error(\"Could not get context of canvas\");\n\n\t\tthis.context = context;\n\t\tthis.context.imageSmoothingEnabled = false;\n\t\tthis.context[\"mozImageSmoothingEnabled\"] = false;\n\t}\n\n\tprivate get backingStoreRatio(): number {\n\t\treturn (\n\t\t\tthis.overrideRatio ||\n            (this.context[\"webkitBackingStorePixelRatio\"]) ||\n            (this.context[\"mozBackingStorePixelRatio\"]) ||\n            (this.context[\"msBackingStorePixelRatio\"]) ||\n            (this.context[\"oBackingStorePixelRatio\"]) ||\n            (this.context[\"backingStorePixelRatio\"]) ||\n            1\n\t\t);\n\t}\n\n\tprivate get devicePixelRation(): number {\n\t\treturn this.overrideRatio || window.devicePixelRatio || 1;\n\t}\n\n\tprivate getDrawRatio(backingStoreRatio, devicePixelRatio): number {\n\t\treturn devicePixelRatio / backingStoreRatio;\n\t}\n\n\t/**\n     * Sets the size of the canvas\n     *\n     * @param {number} width The width of the canvas, in pixels\n     * @param {number} height The width of the canvas, in pixels\n     */\n\tsetSize(width: number, height: number) {\n\t\t// Calculate the display density pixel ratio\n\t\tthis.drawRatio = this.getDrawRatio(this.backingStoreRatio, this.devicePixelRation);\n\n\t\t// Set the canvas size\n\t\tif (this.backingStoreRatio !== this.devicePixelRation) {\n\t\t\t// Set the virtual canvas size to the real resolution\n\t\t\tthis.element.width = width * this.drawRatio;\n\t\t\tthis.element.height = height * this.drawRatio;\n\n\t\t\t// Set the presented canvas size to the visible resolution\n\t\t\tthis.element.style.width = `${width}px`;\n\t\t\tthis.element.style.minWidth = `${width}px`;\n\t\t\tthis.element.style.height = `${height}px`;\n\t\t\tthis.element.style.minHeight = `${height}px`;\n\t\t} else {\n\t\t\t// 1:1 ratio, just scale it\n\t\t\tthis.element.width = width;\n\t\t\tthis.element.height = height;\n\n\t\t\tthis.element.style.width = \"\";\n\t\t\tthis.element.style.height = \"\";\n\t\t}\n\n\t\t// Scale the canvas according to the ratio\n\t\tthis.context.scale(this.drawRatio, this.drawRatio);\n\n\t\t// Save the virtual size of the canvas\n\t\tthis.virtualWidth = width;\n\t\tthis.virtualHeight = height;\n\t}\n\n\t/** Clears the canvas */\n\tclear() {\n\t\tthis.context.clearRect(0, 0, this.element.width, this.element.height);\n\t}\n\n\t/**\n     * Draws this canvas to another {@link foreignContext} canvas\n     *\n     * @param {number} x The x position to draw the canvas\n     * @param {number} y The y position to draw the canvas\n     * @param {CanvasRenderingContext2D} foreignContext The context to draw to\n     */\n\tdrawTo(x: number, y: number, foreignContext: CanvasRenderingContext2D) {\n\t\tforeignContext.save();\n\t\tforeignContext.scale(1 / this.drawRatio, 1 / this.drawRatio);\n\t\tforeignContext.drawImage(this.element, x, y);\n\t\tforeignContext.restore();\n\t}\n\n\t/**\n     * Attaches the canvas element as child to given {@link element}\n     *\n     * @param {HTMLElement} element The element to attach the canvas to\n     */\n\tattachToElement(element: HTMLElement) {\n\t\telement.appendChild(this.element);\n\t}\n\n\t// #region Getters\n\tget width(): number {\n\t\treturn this.virtualWidth || this.element.width;\n\t}\n\n\tget height(): number {\n\t\treturn this.virtualHeight || this.element.height;\n\t}\n\t// #endregion\n\n}", "import { Theme } from \"./../utils/theme\";\nimport { Cell } from \"./../enums/cell\";\nimport { DensityCanvas } from \"../components/density-canvas\";\n\nexport class Grid {\n\n\t// Define sizing\n\tpublic rows = 32;\n\n\tpublic cols = 32;\n\n\tpublic cellWidth = 0;\n\n\tpublic cellHeight = 0;\n\n\t// Define properties\n\tpublic cells: Cell[][] = [];\n\n\t// Misc\n\tprivate canvasBuffer = new DensityCanvas(\"grid-buffer\");\n\n\tprivate isDirty = false;\n\n\t// #region Lifecycle\n\tprivate setupCells() {\n\t\tthis.cells = [];\n\t\tfor (let row = 0; row < this.rows; row++) {\n\t\t\tthis.cells[row] = [];\n\t\t\tfor (let col = 0; col < this.cols; col++) {\n\t\t\t\tthis.cells[row][col] = Cell.Dead;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic load(pattern: Cell[][]) {\n\t\tconst center = { x: Math.floor(this.cols / 2), y: Math.floor(this.rows / 2) };\n\n\t\t// Clear the grid\n\t\tthis.setupCells();\n\n\t\t// Load the pattern\n\t\tconst patternWidth = pattern[0].length;\n\t\tconst patternHeight = pattern.length;\n\t\tfor (let row = 0; row < patternHeight; row++) {\n\t\t\tfor (let col = 0; col < patternWidth; col++) {\n\t\t\t\tthis.setCell(\n\t\t\t\t\tMath.floor(center.y + row - patternHeight / 2),\n\t\t\t\t\tMath.floor(center.x + col - patternWidth / 2),\n\t\t\t\t\tpattern[row][col]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic random() {\n\t\tthis.cells = [];\n\t\tfor (let row = 0; row < this.rows; row++) {\n\t\t\tthis.cells[row] = [];\n\t\t\tfor (let col = 0; col < this.cols; col++) {\n\t\t\t\tthis.cells[row][col] = Math.random() <= 0.25 ? Cell.Alive : Cell.Dead;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic onLayout(width: number, height: number) {\n\t\t// Calculate the cell size\n\t\tconst minAxis = Math.min(width, height);\n\t\tthis.cellHeight = minAxis / this.rows;\n\t\tthis.cellWidth = minAxis / this.cols;\n\n\t\t// Resize the canvas buffer\n\t\tthis.canvasBuffer.setSize(width, height);\n\t\tthis.isDirty = true;\n\t}\n\t// #endregion\n\n\t// #region Utility\n\tprivate getCell(row: number, col: number) {\n\t\tif (row < 0 || row >= this.rows || col < 0 || col >= this.cols) return Cell.Dead;\n\n\t\treturn this.cells[row][col];\n\t}\n\n\tprivate setCell(row: number, col: number, cell: Cell) {\n\t\tif (row < 0 || row >= this.rows || col < 0 || col >= this.cols) return;\n\t\tthis.cells[row][col] = cell;\n\t}\n\n\tprivate getNeighborCount(row: number, col: number) {\n\t\tlet count = 0;\n\n\t\t// Top\n\t\tif (this.getCell(row - 1, col) === Cell.Alive) count++;\n\t\t// Top left\n\t\tif (this.getCell(row - 1, col - 1) === Cell.Alive) count++;\n\t\t// Left\n\t\tif (this.getCell(row, col - 1) === Cell.Alive) count++;\n\t\t// Top right\n\t\tif (this.getCell(row - 1, col + 1) === Cell.Alive) count++;\n\t\t// Right\n\t\tif (this.getCell(row, col + 1) === Cell.Alive) count++;\n\t\t// Bottom\n\t\tif (this.getCell(row + 1, col) === Cell.Alive) count++;\n\t\t// Bottom left\n\t\tif (this.getCell(row + 1, col - 1) === Cell.Alive) count++;\n\t\t// Bottom right\n\t\tif (this.getCell(row + 1, col + 1) === Cell.Alive) count++;\n\n\t\treturn count;\n\t}\n\t// #endregion\n\n\tpublic invalidate() {\n\t\tthis.isDirty = true;\n\t}\n\n\tpublic render(originalCtx: CanvasRenderingContext2D) {\n\t\tif (this.isDirty) {\n\t\t\tthis.isDirty = false;\n\t\t\tconst ctx = this.canvasBuffer.context;\n\t\t\tthis.canvasBuffer.clear();\n\n\t\t\t// Draw the lines\n\t\t\tctx.strokeStyle = Theme.containerBorder;\n\t\t\tctx.lineWidth = 1;\n\n\t\t\t// Horizontal lines\n\t\t\tfor (let row = 0; row < this.rows; row++)\n\t\t\t\tctx.drawLine(0, row * this.cellHeight, ctx.canvas.width, row * this.cellHeight);\n\t\t\t// Vertical lines\n\t\t\tfor (let col = 0; col < this.cols; col++)\n\t\t\t\tctx.drawLine(col * this.cellWidth, 0, col * this.cellWidth, ctx.canvas.height);\n\t\t}\n\n\t\tthis.renderCells(originalCtx);\n\n\t\t// Draw the buffer to the original canvas\n\t\tthis.canvasBuffer.drawTo(0, 0, originalCtx);\n\t}\n\n\tprivate renderCells(ctx: CanvasRenderingContext2D) {\n\t\t// Draw the cells\n\t\tctx.fillStyle = Theme.cellAlive;\n\t\tfor (let row = 0; row < this.rows; row++) {\n\t\t\tfor (let col = 0; col < this.cols; col++) {\n\t\t\t\tif (this.cells[row][col] === Cell.Alive) {\n\t\t\t\t\tctx.fillRect(col * this.cellWidth, row * this.cellHeight, this.cellWidth, this.cellHeight);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic update() {\n\t\t/*\n           Rules:\n           1- Any live cell with fewer than two live neighbors dies, as if by underpopulation.\n           2- Any live cell with two or three live neighbors lives on to the next generation.\n           3- Any live cell with more than three live neighbors dies, as if by overpopulation.\n           4- Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n        */\n\n\t\tconst buffer: Cell[][] = [];\n\t\tfor (let row = 0; row < this.rows; row++) {\n\t\t\tbuffer[row] = [];\n\n\t\t\tfor (let col = 0; col < this.cols; col++) {\n\t\t\t\tconst cell = this.getCell(row, col);\n\t\t\t\tconst neighbors = this.getNeighborCount(row, col);\n\n\t\t\t\tif (cell == Cell.Alive) {\n\t\t\t\t\tif (neighbors < 2) {\n\t\t\t\t\t\t// Rule 1\n\t\t\t\t\t\tbuffer[row][col] = Cell.Dead;\n\t\t\t\t\t} else if (neighbors === 2 || neighbors === 3) {\n\t\t\t\t\t\t// Rule 2\n\t\t\t\t\t\tbuffer[row][col] = Cell.Alive;\n\t\t\t\t\t} else if (neighbors > 3) {\n\t\t\t\t\t\t// Rule 3\n\t\t\t\t\t\tbuffer[row][col] = Cell.Dead;\n\t\t\t\t\t}\n\t\t\t\t} else if (neighbors === 3) {\n\t\t\t\t\t// Rule 4\n\t\t\t\t\tbuffer[row][col] = Cell.Alive;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.cells = buffer;\n\t}\n\n}", "export class FontLoader {\n\n\tpublic static fontFamily = \"'Rubik', cursive\";\n\n\tpublic static async load() {\n\t\t// Define the sizes on which the font will be used, to preload\n\t\tconst sizes = [12, 20, 40];\n\n\t\t// For each size, check if already loaded, if not wait until it loads\n\t\tconst promises = sizes.map(async size => {\n\t\t\tconst font = `${size}pt ${FontLoader.fontFamily}`;\n\t\t\tif (!document.fonts.check(font)) {\n\t\t\t\tawait document.fonts.load(font);\n\t\t\t}\n\t\t});\n\n\t\t// Waits in parallel\n\t\tawait Promise.all(promises);\n\t}\n\n}", "import { Cell } from \"../enums/cell\";\nimport { Log } from \"./log\";\n\nexport class PatternLoader {\n\n\t/**\n\t * Resolves and expands an image to absolute path\n\t *\n\t * @param {string} identifier Specifies the file to be loaded\n\t * @return {string} The resolved path of the file\n\t */\n\tprivate static resolvePath(identifier) {\n\t\tconst locationRoot = window.location.href.indexOf(\"http://localhost\")\n\t\t\t? window.location.href\n\t\t\t: window.location.pathname.substring(0, window.location.pathname.lastIndexOf(\"/\"));\n\t\tconst relativePath = \"/assets/\";\n\n\t\treturn locationRoot + relativePath + identifier;\n\t}\n\n\tprivate static parse(data: string): Cell[][] {\n\t\t// Split the data into lines\n\t\tconst lines = data.split(\"\\n\").map(x => x.trim());\n\n\t\t// Get the number of lines and columns\n\t\tconst lineCount = lines.length;\n\t\tconst columnCount = Math.max(...lines.map(x => x.length));\n\n\t\t// Create the grid\n\t\tconst cells: Cell[][] = [];\n\t\tfor (let row = 0; row < lineCount; row++) {\n\t\t\tcells[row] = [];\n\t\t\tfor (let col = 0; col < columnCount; col++) {\n\t\t\t\tif (lines[row][col] === \"X\") {\n\t\t\t\t\tcells[row][col] = Cell.Alive;\n\t\t\t\t} else {\n\t\t\t\t\tcells[row][col] = Cell.Dead;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconsole.groupCollapsed(\"Loading pattern\");\n\t\tconsole.table(cells);\n\t\tLog.debug(\"Pattern loader\", `${lineCount} rows and ${columnCount} columns.`);\n\t\tconsole.groupEnd();\n\n\t\treturn cells;\n\t}\n\n\tpublic static async load(filename: string): Promise<Cell[][]> {\n\t\tconst response = await fetch(this.resolvePath(filename));\n\t\tconst data = await response.text();\n\n\t\treturn PatternLoader.parse(data);\n\t}\n\n}", "import \"./extensions\";\nimport { Log } from \"./utils/log\";\nimport { Grid } from \"./models/grid\";\nimport { Theme } from \"./utils/theme\";\nimport { FontLoader } from \"./utils/font\";\nimport { DensityCanvas } from \"./components/density-canvas\";\nimport { PatternLoader } from \"./utils/pattern\";\n\nexport class Main {\n\n\t// Graphics\n\tpublic canvas = new DensityCanvas(\"canvas\");\n\n\tpublic ctx = this.canvas.context;\n\n\t// Frame time\n\tprivate targetFPS = 15;\n\n\tprivate targetFrameTime = 1 / this.targetFPS;\n\n\tprivate frameTimer = 0;\n\n\tprivate lastFrameTime = performance.now();\n\n\tprivate frameCounter = 0;\n\n\tprivate fpsTimer = 0;\n\n\tpublic fps = 0;\n\n\t// State\n\tprivate isPaused = false;\n\n\tprivate grid: Grid = new Grid();\n\n\tconstructor() {\n\t\tLog.info(\"Game of life\", \"Starting up...\");\n\t\tthis.attachHooks();\n\n\t\t// Setup theme controller\n\t\tTheme.setup(this);\n\t}\n\n\tprivate attachHooks() {\n\t\tLog.info(\"Checkers\", \"Attaching hooks...\");\n\t\twindow.addLoadEventListener(this.onLoad.bind(this));\n\t\twindow.addEventListener(\"resize\", this.onResize.bind(this));\n\t\twindow.addVisibilityChangeEventListener(this.onVisibilityChange.bind(this));\n\t}\n\n\t// #region Event listeners\n\tprivate async onLoad() {\n\t\tLog.debug(\"Game of life\", \"Window loaded\");\n\n\t\t// Attach the canvas element to the container element\n\t\tconst container = document.getElementById(\"container\");\n\t\tif (!container) throw new Error(\"Could not find container element\");\n\t\tthis.canvas.attachToElement(container);\n\n\t\t// Force layout\n\t\tthis.onLayout();\n\n\t\t// Load the font\n\t\tawait FontLoader.load();\n\n\t\t// Load default pattern\n\t\tawait this.loadPattern(\"glider\");\n\n\t\t// Request the first frame\n\t\tthis.requestNextFrame();\n\t}\n\n\tprivate onResize() {\n\t\tLog.debug(\"Game of life\", \"Window resized\");\n\t\tthis.onLayout();\n\t}\n\n\tprivate onVisibilityChange(isVisible: boolean) {\n\t\tLog.debug(\"Game of life\", `Window visibility changed to ${isVisible}` ? \"visible\" : \"hidden\");\n\t\tthis.isPaused = !isVisible;\n\t\tif (isVisible) this.requestNextFrame();\n\t}\n\n\tprivate onLayout() {\n\t\tLog.debug(\"Game of life\", \"Window layout changed\");\n\n\t\t// Get available space\n\t\tconst container = document.getElementById(\"container\") ?? document.body;\n\t\tconst width = container.clientWidth;\n\t\tconst height = container.clientHeight;\n\n\t\t// Resize the grid\n\t\tthis.grid.onLayout(width, height);\n\n\t\t// Resize the canvas\n\t\tthis.canvas.setSize(this.grid.cellWidth * this.grid.cols, this.grid.cellHeight * this.grid.rows);\n\t}\n\t// #endregion\n\n\t// #region Game loop\n\tprivate requestNextFrame() {\n\t\tif (this.isPaused) return;\n\n\t\tthis.lastFrameTime = performance.now();\n\t\trequestAnimationFrame(this.onFrame.bind(this));\n\t}\n\n\tprivate onFrame(time) {\n\t\t// Ignore frames when the page is not visible\n\t\tif (this.isPaused) return;\n\n\t\t// Calculate the delta time\n\t\tlet deltaTime = (time - this.lastFrameTime) / 1000.0;\n\t\tthis.frameTimer += deltaTime;\n\t\tthis.fpsTimer += deltaTime;\n\n\t\twhile (this.frameTimer >= this.targetFrameTime) {\n\t\t\tthis.frameTimer -= this.targetFrameTime;\n\t\t\tdeltaTime = this.targetFrameTime;\n\n\t\t\t// Handle fps counter\n\t\t\tthis.frameCounter++;\n\t\t\tif (this.fpsTimer >= 1.0) {\n\t\t\t\tthis.fpsTimer -= 1.0;\n\t\t\t\tthis.fps = this.frameCounter;\n\t\t\t\tthis.frameCounter = 0;\n\n\t\t\t\tLog.debug(\"Game of life\", `FPS: ${this.fps}`);\n\t\t\t}\n\n\t\t\t// Update the game state\n\t\t\tthis.update();\n\t\t}\n\n\t\t// Render the game state\n\t\tthis.render();\n\n\t\t// Request the next frame\n\t\tthis.requestNextFrame();\n\t}\n\n\tprivate renderDebugOverlay() {\n\t\tif (!DEBUG) return;\n\n\t\tthis.ctx.font = `12px ${FontLoader.fontFamily}`;\n\t\tthis.ctx.fillStyle = Theme.foreground;\n\t\tthis.ctx.fillText(`FPS: ${this.fps}`, 10, 22.5);\n\t}\n\n\tprivate update() {\n\t\tthis.grid.update();\n\t}\n\n\tprivate render() {\n\t\tthis.canvas.clear();\n\t\tthis.grid.render(this.ctx);\n\t\tthis.renderDebugOverlay();\n\t}\n\t// #endregion\n\n\t// #region UI\n\tpublic async loadPattern(filename) {\n\t\t// Load the pattern\n\t\tconst pattern = await PatternLoader.load(`pattern-${filename}.txt`);\n\t\tthis.grid.load(pattern);\n\t}\n\n\tpublic async randomPattern() {\n\t\t// Generate the random pattern\n\t\tthis.grid.random();\n\t}\n\t// #endregion\n\n}\n\n// Start the game\nwindow._instance = new Main();"],
  "mappings": "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",
  "names": ["listener", "fired", "_func", "prefixes", "isDocumentHidden", "x", "a", "b", "prefix", "x1", "y1", "x2", "y2", "y", "radius", "filename", "Log", "level", "tag", "tagColor", "args", "Color", "hex", "tmp", "color", "r", "g", "b", "Theme", "main", "__async", "variables", "Log", "style", "variable", "value", "name", "Color", "darkThemeMediaQuery", "DensityCanvas", "name", "context", "backingStoreRatio", "devicePixelRatio", "width", "height", "x", "y", "foreignContext", "element", "Grid", "DensityCanvas", "row", "col", "pattern", "center", "patternWidth", "patternHeight", "width", "height", "minAxis", "cell", "count", "originalCtx", "ctx", "Theme", "buffer", "neighbors", "_FontLoader", "__async", "promises", "size", "font", "FontLoader", "PatternLoader", "identifier", "data", "lines", "x", "lineCount", "columnCount", "cells", "row", "col", "Log", "filename", "__async", "Main", "DensityCanvas", "Grid", "Log", "Theme", "__async", "container", "FontLoader", "isVisible", "_a", "width", "height", "time", "deltaTime", "filename", "pattern", "PatternLoader"]
}
